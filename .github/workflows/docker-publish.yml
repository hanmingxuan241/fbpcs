name: Publish OneDocker image

on:
  workflow_dispatch:
    inputs:
      name:
        required: true
        description: 'Manually running this workflow will skip "Check New Commits" step and build image directly'
        default: "Run"
      new_tag:
        description: "The new tag of the docker image"
        required: false
        type: string
        default: latest-build
      tracker_hash:
        description: "[Internal usage] Used for tracking workflow job status within Meta infra"
        required: false
        type: str

env:
  DISTRO: ubuntu
  REGISTRY: ghcr.io
  LOCAL_IMAGE_NAME: fbpcs/onedocker
  RC_REGISTRY_IMAGE_NAME: ghcr.io/${{ github.repository }}/rc/onedocker
  PROD_REGISTRY_IMAGE_NAME: ghcr.io/${{ github.repository }}/onedocker
  COORDINATOR_IMAGE: ghcr.io/facebookresearch/fbpcs/coordinator
  PL_CONTAINER_NAME: e2e_pl_container
  PA_CONTAINER_NAME: e2e_pa_container
  TIME_RANGE: 24 hours
  FBPCF_VERSION: latest

jobs:
  ### Build data processing image
  build_data_processing_image:
    name: Build Data Processing Image
    runs-on: ubuntu-20.04
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-data-processing-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-data-processing

      - name: Pull FBPCF Image
        run: docker pull ghcr.io/facebookresearch/fbpcf/ubuntu:${{ env.FBPCF_VERSION }}

      - name: Build Data Processing image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/data_processing/Dockerfile.ubuntu
          push: false
          tags: fbpcs/data_processing:latest
          build-args: |
            tag=latest
            os_release=20.04
            fbpcf_image=ghcr.io/facebookresearch/fbpcf/ubuntu:${{ env.FBPCF_VERSION }}
          outputs: type=docker,dest=data_processing.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - uses: actions/upload-artifact@v3
        with:
          name: data_processing_image
          path: data_processing.tar
          if-no-files-found: error

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  ### Build emp_games image
  build_emp_games_image:
    name: Build Emp Games Image
    runs-on: ubuntu-20.04
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-emp-games-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-emp-games

      - name: Pull FBPCF Image
        run: docker pull ghcr.io/facebookresearch/fbpcf/ubuntu:${{ env.FBPCF_VERSION }}

      - name: Build EMP Games image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/emp_games/Dockerfile.ubuntu
          push: false
          tags: fbpcs/emp_games:latest
          build-args: |
            tag=latest
            os_release=20.04
            fbpcf_image=ghcr.io/facebookresearch/fbpcf/ubuntu:${{ env.FBPCF_VERSION }}
          outputs: type=docker,dest=emp_games.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - uses: actions/upload-artifact@v3
        with:
          name: emp_games_image
          path: emp_games.tar
          if-no-files-found: error

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  ### Build and publish rc/onedocker image
  build_onedocker_image:
    name: Build OneDocker Image
    runs-on: ubuntu-20.04
    needs: [build_data_processing_image, build_emp_games_image]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Download Data Processing Image
        uses: actions/download-artifact@v3
        with:
          name: data_processing_image

      - name: Download MPC Games Image
        uses: actions/download-artifact@v3
        with:
          name: emp_games_image

      - name: DEBUG - List current directory
        run: ls

      - name: Load Images
        run: |
          docker load --input data_processing.tar && docker load --input emp_games.tar

      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-onedocker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-onedocker

      - name: Print Tracker Hash
        run: echo ${{ github.event.inputs.tracker_hash }}

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish onedocker image in rc
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/onedocker/Dockerfile.ubuntu
          tags: |
            fbpcs/onedocker:latest
            ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{github.event.inputs.new_tag}}
            ${{ env.RC_REGISTRY_IMAGE_NAME }}:rc
          push: false
          build-args: |
            tag=latest
            os_release=20.04
          outputs: type=docker,dest=onedocker.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # end_to_end_test:
  #   name: End to End Test Onedocker Image
  #   runs-on: self-hosted
  #   needs: build_onedocker_image

  #   steps:
  #     - name: Cleanup ECS running tasks and previous running results
  #       run: |
  #         ./cleanup.sh
  #       working-directory: ./fbpcs/tests/github/

  #     - name: Pull coordinator image
  #       run: |
  #         docker pull ${{ env.COORDINATOR_IMAGE }}:${{ github.event.inputs.new_tag }}

  #     ### Private Lift and Attribution E2E tests
  #     - name: End to end testing
  #       timeout-minutes: 90
  #       run: |
  #         docker run --rm -v "instances":"/instances" -v "$(realpath fbpcs_e2e_aws.yml):/home/pcs/pl_coordinator_env/fbpcs_e2e_aws.yml" -v "$(realpath bolt_config.yml):/home/pcs/pl_coordinator_env/bolt_config.yml" ${{ env.COORDINATOR_IMAGE }}:${{ github.event.inputs.new_tag }} python3.8 -m fbpcs.private_computation_cli.private_computation_cli bolt_e2e --bolt_config="bolt_config.yml"
  #       working-directory: ./fbpcs/tests/github/


  # publish_onedocker_image:
  #   name: Publish OneDocker Image
  #   runs-on: ubuntu-20.04
  #   needs: end_to_end_test

  #   steps:
  #     - name: Pull image from rc registry
  #       run: |
  #         docker pull ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }}

  #     - name: Set output
  #       id: vars
  #       run: echo ::set-output name=ref::${GITHUB_REF##*/}

  #     - name: Tag image
  #       run: |
  #         docker tag ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }} ${{ env.PROD_REGISTRY_IMAGE_NAME }}:${{ github.sha }}
  #         docker tag ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }} ${{ env.PROD_REGISTRY_IMAGE_NAME }}:${{github.event.inputs.new_tag}}
  #         docker tag ${{ env.RC_REGISTRY_IMAGE_NAME }}:${{ github.sha }} ${{ env.PROD_REGISTRY_IMAGE_NAME }}:${{ steps.vars.outputs.ref }}

  #     - name: Push docker image to prod registry
  #       run: |
  #         docker push --all-tags ${{ env.PROD_REGISTRY_IMAGE_NAME }}
